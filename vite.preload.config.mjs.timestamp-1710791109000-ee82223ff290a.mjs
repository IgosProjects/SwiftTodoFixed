// vite.preload.config.mjs
import { defineConfig, mergeConfig } from "file:///D:/Projects/swifttodo/node_modules/vite/dist/node/index.js";

// vite.base.config.mjs
import { builtinModules } from "node:module";

// package.json
var package_default = {
  name: "swifttodo",
  productName: "swifttodo",
  version: "1.0.0",
  description: "My Electron application description",
  main: ".vite/build/main.js",
  scripts: {
    start: "electron-forge start",
    package: "electron-forge package",
    make: "electron-forge make",
    publish: "electron-forge publish",
    lint: 'echo "No linting configured"'
  },
  devDependencies: {
    "@electron-forge/cli": "^7.3.0",
    "@electron-forge/maker-deb": "^7.3.0",
    "@electron-forge/maker-rpm": "^7.3.0",
    "@electron-forge/maker-squirrel": "^7.3.0",
    "@electron-forge/maker-zip": "^7.3.0",
    "@electron-forge/plugin-auto-unpack-natives": "^7.3.0",
    "@electron-forge/plugin-fuses": "^7.3.0",
    "@electron-forge/plugin-vite": "^7.3.0",
    "@electron/fuses": "^1.7.0",
    "@vitejs/plugin-react-refresh": "^1.3.6",
    autoprefixer: "^10.4.18",
    electron: "29.1.4",
    postcss: "^8.4.36",
    tailwindcss: "^3.4.1",
    vite: "^5.1.6",
    "vite-plugin-tailwind": "^0.0.4"
  },
  keywords: [],
  author: {
    name: "IgosProjects",
    email: "148572592+IgosProjects@users.noreply.github.com"
  },
  license: "MIT",
  dependencies: {
    "electron-squirrel-startup": "^1.0.0",
    react: "^18.2.0",
    "react-dom": "^18.2.0"
  }
};

// vite.base.config.mjs
var builtins = [
  "electron",
  ...builtinModules.map((m) => [m, `node:${m}`]).flat()
];
var external = [...builtins, ...Object.keys(package_default.dependencies || {})];
var getBuildConfig = (env) => {
  const { root, mode, command } = env;
  return {
    root,
    mode,
    build: {
      // Prevent multiple builds from interfering with each other.
      emptyOutDir: false,
      // ðŸš§ Multiple builds may conflict.
      outDir: ".vite/build",
      watch: command === "serve" ? {} : null,
      minify: command === "build"
    },
    clearScreen: false
  };
};
var pluginHotRestart = (command) => {
  return {
    name: "@electron-forge/plugin-vite:hot-restart",
    closeBundle() {
      if (command === "reload") {
        for (const server of Object.values(process.viteDevServers)) {
          server.ws.send({ type: "full-reload" });
        }
      } else {
        process.stdin.emit("data", "rs");
      }
    }
  };
};

// vite.preload.config.mjs
var vite_preload_config_default = defineConfig((env) => {
  const forgeEnv = env;
  const { forgeConfigSelf } = forgeEnv;
  const config = {
    build: {
      rollupOptions: {
        external,
        // Preload scripts may contain Web assets, so use the `build.rollupOptions.input` instead `build.lib.entry`.
        input: forgeConfigSelf.entry,
        output: {
          format: "cjs",
          // It should not be split chunks.
          inlineDynamicImports: true,
          entryFileNames: "[name].js",
          chunkFileNames: "[name].js",
          assetFileNames: "[name].[ext]"
        }
      }
    },
    plugins: [pluginHotRestart("reload")]
  };
  return mergeConfig(getBuildConfig(forgeEnv), config);
});
export {
  vite_preload_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
